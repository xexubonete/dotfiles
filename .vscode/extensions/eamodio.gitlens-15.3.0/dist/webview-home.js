exports.id=928,exports.ids=[928],exports.modules={9887:(t,e,i)=>{i.d(e,{HomeWebviewProvider:()=>HomeWebviewProvider});var n=i(1398),o=i(4293),s=i(7899),r=i(8973),a=i(3355);let h="home",g=new a.Q2(h,"section/collapse"),d=new a.C1(h,"repositories/didChange"),c=new a.C1(h,"integrations/didChange"),p=new a.C1(h,"subscription/didChange"),C=new a.C1(h,"org/settings/didChange"),l=Object.freeze({dispose:()=>{}});let HomeWebviewProvider=class HomeWebviewProvider{constructor(t,e){this.container=t,this.host=e,this._disposable=n.Disposable.from(this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),n.workspace.isTrusted?l:n.workspace.onDidGrantWorkspaceTrust(this.notifyDidChangeRepositories,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),(0,r.wt)(this.onContextChanged,this),this.container.integrations.onDidChangeConnectionState(this.onChangeConnectionState,this))}_disposable;dispose(){this._disposable.dispose()}onChangeConnectionState(){this.notifyDidChangeOnboardingIntegration()}onRepositoriesChanged(){this.notifyDidChangeRepositories()}registerCommands(){return[(0,s.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0),this)]}onMessageReceived(t){!0===g.is(t)&&this.onCollapseSection(t.params)}includeBootstrap(){return this.getState()}onReloaded(){this.notifyDidChangeRepositories()}onCollapseSection(t){let e=this.container.storage.get("home:sections:collapsed");if(null==e){!0===t.collapsed&&this.container.storage.store("home:sections:collapsed",[t.section]);return}let i=e.indexOf(t.section);if(!0===t.collapsed){-1===i&&this.container.storage.store("home:sections:collapsed",[...e,t.section]);return}-1!==i&&(e.splice(i,1),this.container.storage.store("home:sections:collapsed",e))}getWalkthroughCollapsed(){return this.container.storage.get("home:sections:collapsed")?.includes("walkthrough")??!1}getOrgSettings(){return{drafts:(0,r.SD)("gitlens:gk:organization:drafts:enabled",!1)}}onContextChanged(t){"gitlens:gk:organization:drafts:enabled"===t&&this.notifyDidChangeOrgSettings()}onSubscriptionChanged(t){this.notifyDidChangeSubscription(t.current)}async getState(t){return t??=await this.container.subscription.getSubscription(!0),{...this.host.baseWebviewState,repositories:this.getRepositoriesState(),webroot:this.host.getWebRoot(),promoStates:await this.getCanShowPromos(t),subscription:t,orgSettings:this.getOrgSettings(),walkthroughCollapsed:this.getWalkthroughCollapsed(),hasAnyIntegrationConnected:this.isAnyIntegrationConnected()}}getRepositoriesState(){return{count:this.container.git.repositoryCount,openCount:this.container.git.openRepositoryCount,hasUnsafe:this.container.git.hasUnsafeRepositories(),trusted:n.workspace.isTrusted}}_hostedIntegrationConnected;isAnyIntegrationConnected(t=!1){return(null==this._hostedIntegrationConnected||!0===t)&&(this._hostedIntegrationConnected=[...this.container.integrations.getConnected("hosting"),...this.container.integrations.getConnected("issues")].length>0),this._hostedIntegrationConnected}async getCanShowPromos(t){let e={hs2023:!1,pro50:!1},i=t??await this.container.subscription.getSubscription(!0),n=new Date("2023-12-31T07:59:00.000Z").getTime();return Date.now()<n&&!(0,o.A_)(i)?e.hs2023=!0:null!=t&&((0,o.Mt)(t)||(0,o.Jc)(t))&&(e.pro50=!0),e}notifyDidChangeRepositories(){this.host.notify(d,this.getRepositoriesState())}notifyDidChangeOnboardingIntegration(){let t=this.isAnyIntegrationConnected(!0);this.host.notify(c,{hasAnyIntegrationConnected:t})}async notifyDidChangeSubscription(t){t??=await this.container.subscription.getSubscription(!0),this.host.notify(p,{promoStates:await this.getCanShowPromos(t),subscription:t})}notifyDidChangeOrgSettings(){this.host.notify(C,{orgSettings:this.getOrgSettings()})}}}};