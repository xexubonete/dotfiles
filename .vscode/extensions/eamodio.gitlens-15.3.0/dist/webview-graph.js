exports.id=795,exports.ids=[795],exports.modules={2055:(e,t,i)=>{i.d(t,{GraphWebviewProvider:()=>GraphWebviewProvider});var s=i(1398),r=i(5176),a=i(3900),o=i(3807),n=i(8803),h=i(4703),l=i(1885),p=i(9432),d=i(3708),g=i(3161),c=i(300),m=i(2013),u=i(8880),f=i(1310),v=i(236),w=i(9102),y=i(5287),b=i(5313),C=i(4693),R=i(304),P=i(6645),W=i(7788),S=i(2124),D=i(9634),_=i(3269),k=i(1478),I=i(7587),G=i(6964),T=i(7899),M=i(4832),O=i(8973),H=i(6950),V=i(6707),B=i(560),A=i(4026),F=i(3395),q=i(3131),L=i(2471),x=i(4125),E=i(4118),$=i(1500),N=i(3355);let j="graph",z=["upstream","pullRequest","issue"],Y=new N.Q2(j,"chooseRepository"),U=new N.Oz(j,"chooseRef"),Z=new N.Q2(j,"dblclick"),Q=new N.Q2(j,"avatars/get"),J=new N.Q2(j,"refs/metadata/get"),K=new N.Q2(j,"rows/get"),X=new N.Q2(j,"pullRequest/openDetails"),ee=new N.Q2(j,"search/openInView"),et=new N.Q2(j,"columns/update"),ei=new N.Q2(j,"refs/update/visibility"),es=new N.Q2(j,"filters/update/excludeTypes"),er=new N.Q2(j,"configuration/update"),ea=new N.Q2(j,"filters/update/includedRefs"),eo=new N.Q2(j,"selection/update"),en=new N.Oz(j,"rows/ensure"),eh=new N.Oz(j,"row/hover/get"),el=new N.Oz(j,"search"),ep=new N.C1(j,"repositories/integration/didChange"),ed=new N.C1(j,"didChange",!0,!0),eg=new N.C1(j,"configuration/didChange"),ec=new N.C1(j,"subscription/didChange"),em=new N.C1(j,"avatars/didChange"),eu=new N.C1(j,"branchState/didChange"),ef=new N.C1(j,"refs/didChangeMetadata"),ev=new N.C1(j,"columns/didChange"),ew=new N.C1(j,"scrollMarkers/didChange"),ey=new N.C1(j,"refs/didChangeVisibility"),eb=new N.C1(j,"rows/didChange",void 0,!0),eC=new N.C1(j,"rows/stats/didChange"),eR=new N.C1(j,"selection/didChange"),eP=new N.C1(j,"workingTree/didChange"),eW=new N.C1(j,"didSearch"),eS=new N.C1(j,"didFetch");var eD=Object.defineProperty,e_=Object.getOwnPropertyDescriptor,ek=(e,t,i,s)=>{for(var r,a=s>1?void 0:s?e_(t,i):t,o=e.length-1;o>=0;o--)(r=e[o])&&(a=(s?r(t,i,a):r(a))||a);return s&&a&&eD(t,i,a),a};let eI={ref:{width:130,isHidden:!1,order:0},graph:{width:150,mode:void 0,isHidden:!1,order:1},message:{width:300,isHidden:!1,order:2},author:{width:130,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!1,order:5},sha:{width:130,isHidden:!1,order:6}},eG={ref:{width:32,isHidden:!1},graph:{width:150,mode:"compact",isHidden:!1},author:{width:32,isHidden:!1,order:2},message:{width:500,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!0,order:5},sha:{width:130,isHidden:!1,order:6}};let GraphWebviewProvider=class GraphWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._showDetailsView=M.H.get("graph.showDetailsView"),this._theme=s.window.activeColorTheme,this.ensureRepositorySubscriptions(),this._disposable=s.Disposable.from(M.H.onDidChange(this.onConfigurationChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories(async()=>{this._etag!==this.container.git.etag&&(null==this._discovering||(this._etag=await this._discovering,this._etag!==this.container.git.etag))&&this.host.refresh(!0)}),s.window.onDidChangeActiveColorTheme(this.onThemeChanged,this),{dispose:()=>{null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0)}},this.container.integrations.onDidChangeConnectionState(this.onIntegrationConnectionChanged,this))}_repository;get repository(){return this._repository}set repository(e){if(this._repository===e){this.ensureRepositorySubscriptions();return}this._repository=e,this.resetRepositoryState(),this.ensureRepositorySubscriptions(!0),this.host.ready&&this.updateState()}_selection;get activeSelection(){return this._selection?.[0]}_cancellations=new Map;_discovering;_disposable;_etag;_etagSubscription;_etagRepository;_firstSelection=!0;_graph;_hoverCache=new Map;_ipcNotificationMap=new Map([[ev,this.notifyDidChangeColumns],[eg,this.notifyDidChangeConfiguration],[ed,this.notifyDidChangeState],[ey,this.notifyDidChangeRefsVisibility],[ew,this.notifyDidChangeScrollMarkers],[eR,this.notifyDidChangeSelection],[ec,this.notifyDidChangeSubscription],[eP,this.notifyDidChangeWorkingTree],[eS,this.notifyDidFetch]]);_refsMetadata;_search;_selectedId;_selectedRows;_showDetailsView;_theme;_repositoryEventsDisposable;_lastFetchedDisposable;isWindowFocused=!0;dispose(){this._disposable.dispose()}canReuseInstance(...e){let t;if(1===this.container.git.openRepositoryCount)return!0;let[i]=e;return(0,D.Z6)(i)?t=i:eV(i)?t=this.container.git.getRepository(i.ref.repoPath):(0,$.c)(i)&&null!=i.state.selectedRepository&&(t=this.container.git.getRepository(i.state.selectedRepository)),t?.uri.toString()===this.repository?.uri.toString()||void 0}getSplitArgs(){return null!=this.repository?[this.repository]:[]}async onShowing(e,t,...i){this._firstSelection=!0,this._etag=this.container.git.etag,this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories.then(e=>(this._discovering=void 0,e)),this._etag=await this._discovering);let[s]=i;if((0,D.Z6)(s))this.repository=s;else if(eV(s)){this.repository=this.container.git.getRepository(s.ref.repoPath);let e=s.ref.ref;if((0,P.HH)(e)||(e=await this.container.git.resolveReference(s.ref.repoPath,e,void 0,{force:!0})),this.setSelectedRows(e),null!=this._graph){if(this._graph?.ids.has(e))return this.notifyDidChangeSelection(),!0;this.onGetMoreRows({id:e},!0)}}else if((0,$.c)(s)&&null!=s.state.selectedRepository&&(this.repository=this.container.git.getRepository(s.state.selectedRepository)),null==this.repository&&this.container.git.repositoryCount>1){let[t]=(0,a.qU)(o.Ts.ShowGraph,void 0,...i),s=Array.isArray(t)?t[0]:t;"scm"===s.type&&null!=s.scm.rootUri?this.repository=this.container.git.getRepository(s.scm.rootUri):"viewItem"===s.type&&s.node instanceof E.P&&(this.repository=s.node.repo),null!=this.repository&&!e&&this.host.ready&&this.updateState()}return!0}onRefresh(e){e&&this.resetRepositoryState()}includeBootstrap(){return this.getState(!0)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,T.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,T.Lb)(`${this.host.id}.openInTab`,()=>void(0,T.RS)(o.Ts.ShowGraphPage,void 0,this.repository))),e.push(this.host.registerWebviewCommand("gitlens.graph.push",this.push),this.host.registerWebviewCommand("gitlens.graph.pull",this.pull),this.host.registerWebviewCommand("gitlens.graph.fetch",this.fetch),this.host.registerWebviewCommand("gitlens.graph.publishBranch",this.publishBranch),this.host.registerWebviewCommand("gitlens.graph.switchToAnotherBranch",this.switchToAnother),this.host.registerWebviewCommand("gitlens.graph.createBranch",this.createBranch),this.host.registerWebviewCommand("gitlens.graph.deleteBranch",this.deleteBranch),this.host.registerWebviewCommand("gitlens.graph.copyRemoteBranchUrl",e=>this.openBranchOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openBranchOnRemote",this.openBranchOnRemote),this.host.registerWebviewCommand("gitlens.graph.mergeBranchInto",this.mergeBranchInto),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoBranch",this.rebase),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoUpstream",this.rebaseToRemote),this.host.registerWebviewCommand("gitlens.graph.renameBranch",this.renameBranch),this.host.registerWebviewCommand("gitlens.graph.switchToBranch",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.hideLocalBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemoteBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemote",e=>this.hideRef(e,{remote:!0})),this.host.registerWebviewCommand("gitlens.graph.hideRefGroup",e=>this.hideRef(e,{group:!0})),this.host.registerWebviewCommand("gitlens.graph.hideTag",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.cherryPick",this.cherryPick),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl.multi",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote.multi",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openSCM",this.openSCM),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoCommit",this.rebase),this.host.registerWebviewCommand("gitlens.graph.resetCommit",this.resetCommit),this.host.registerWebviewCommand("gitlens.graph.resetToCommit",this.resetToCommit),this.host.registerWebviewCommand("gitlens.graph.resetToTip",this.resetToTip),this.host.registerWebviewCommand("gitlens.graph.revert",this.revertCommit),this.host.registerWebviewCommand("gitlens.graph.showInDetailsView",this.openInDetailsView),this.host.registerWebviewCommand("gitlens.graph.switchToCommit",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.undoCommit",this.undoCommit),this.host.registerWebviewCommand("gitlens.graph.stash.save",this.saveStash),this.host.registerWebviewCommand("gitlens.graph.stash.apply",this.applyStash),this.host.registerWebviewCommand("gitlens.graph.stash.delete",this.deleteStash),this.host.registerWebviewCommand("gitlens.graph.stash.rename",this.renameStash),this.host.registerWebviewCommand("gitlens.graph.createTag",this.createTag),this.host.registerWebviewCommand("gitlens.graph.deleteTag",this.deleteTag),this.host.registerWebviewCommand("gitlens.graph.switchToTag",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.createWorktree",this.createWorktree),this.host.registerWebviewCommand("gitlens.graph.createPullRequest",this.createPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequest",this.openPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequestChanges",this.openPullRequestChanges),this.host.registerWebviewCommand("gitlens.graph.openPullRequestComparison",this.openPullRequestComparison),this.host.registerWebviewCommand("gitlens.graph.openPullRequestOnRemote",this.openPullRequestOnRemote),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithMergeBase",this.openChangedFileDiffsWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareWithUpstream",this.compareWithUpstream),this.host.registerWebviewCommand("gitlens.graph.compareWithHead",this.compareHeadWith),this.host.registerWebviewCommand("gitlens.graph.compareBranchWithHead",this.compareBranchWithHead),this.host.registerWebviewCommand("gitlens.graph.compareWithWorking",this.compareWorkingWith),this.host.registerWebviewCommand("gitlens.graph.compareWithMergeBase",this.compareWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareAncestryWithWorking",this.compareAncestryWithWorking),this.host.registerWebviewCommand("gitlens.graph.copy",this.copy),this.host.registerWebviewCommand("gitlens.graph.copyMessage",this.copyMessage),this.host.registerWebviewCommand("gitlens.graph.copySha",this.copySha),this.host.registerWebviewCommand("gitlens.graph.addAuthor",this.addAuthor),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOn",()=>this.toggleColumn("author",!0)),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOff",()=>this.toggleColumn("author",!1)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOn",()=>this.toggleColumn("datetime",!0)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOff",()=>this.toggleColumn("datetime",!1)),this.host.registerWebviewCommand("gitlens.graph.columnShaOn",()=>this.toggleColumn("sha",!0)),this.host.registerWebviewCommand("gitlens.graph.columnShaOff",()=>this.toggleColumn("sha",!1)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOn",()=>this.toggleColumn("changes",!0)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOff",()=>this.toggleColumn("changes",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOn",()=>this.toggleColumn("graph",!0)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOff",()=>this.toggleColumn("graph",!1)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOn",()=>this.toggleColumn("message",!0)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOff",()=>this.toggleColumn("message",!1)),this.host.registerWebviewCommand("gitlens.graph.columnRefOn",()=>this.toggleColumn("ref",!0)),this.host.registerWebviewCommand("gitlens.graph.columnRefOff",()=>this.toggleColumn("ref",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphCompact",()=>this.setColumnMode("graph","compact")),this.host.registerWebviewCommand("gitlens.graph.columnGraphDefault",()=>this.setColumnMode("graph",void 0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOn",()=>this.toggleScrollMarker("localBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOff",()=>this.toggleScrollMarker("localBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOn",()=>this.toggleScrollMarker("remoteBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOff",()=>this.toggleScrollMarker("remoteBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOn",()=>this.toggleScrollMarker("stashes",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOff",()=>this.toggleScrollMarker("stashes",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOn",()=>this.toggleScrollMarker("tags",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOff",()=>this.toggleScrollMarker("tags",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerPullRequestOn",()=>this.toggleScrollMarker("pullRequests",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerPullRequestOff",()=>this.toggleScrollMarker("pullRequests",!1)),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToBranch",this.copyDeepLinkToBranch),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToCommit",this.copyDeepLinkToCommit),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToRepo",this.copyDeepLinkToRepo),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToTag",this.copyDeepLinkToTag),this.host.registerWebviewCommand("gitlens.graph.shareAsCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.createPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.createCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.openChangedFiles",this.openFiles),this.host.registerWebviewCommand("gitlens.graph.openOnlyChangedFiles",this.openOnlyChangedFiles),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffs",e=>this.openAllChanges(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorking",e=>this.openAllChangesWithWorking(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsIndividually",e=>this.openAllChanges(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorkingIndividually",e=>this.openAllChangesWithWorking(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileRevisions",this.openRevisions),this.host.registerWebviewCommand("gitlens.graph.resetColumnsDefault",()=>this.updateColumns(eI)),this.host.registerWebviewCommand("gitlens.graph.resetColumnsCompact",()=>this.updateColumns(eG)),this.host.registerWebviewCommand("gitlens.graph.copyWorkingChangesToWorktree",this.copyWorkingChangesToWorktree)),e}onWindowFocusChanged(e){this.isWindowFocused=e}onFocusChanged(e){this._showActiveSelectionDetailsDebounced?.cancel(),e&&null!=this.activeSelection&&this.container.commitDetailsView.visible&&this.showActiveSelectionDetails()}onVisibilityChanged(e){if(e||this._showActiveSelectionDetailsDebounced?.cancel(),e&&(null!=this.repository&&this.repository.etag!==this._etagRepository||this.container.subscription.etag!==this._etagSubscription)){this.updateState(!0);return}if(e){this.host.sendPendingIpcNotifications();let{activeSelection:e}=this;if(null==e)return;this.showActiveSelectionDetails()}}onMessageReceived(e){switch(!0){case Y.is(e):this.onChooseRepository();break;case U.is(e):this.onChooseRef(U,e);break;case Z.is(e):this.onDoubleClick(e.params);break;case en.is(e):this.onEnsureRowRequest(en,e);break;case Q.is(e):this.onGetMissingAvatars(e.params);break;case J.is(e):this.onGetMissingRefMetadata(e.params);break;case K.is(e):this.onGetMoreRows(e.params);break;case eh.is(e):this.onHoverRowRequest(eh,e);break;case X.is(e):this.onOpenPullRequestDetails(e.params);break;case el.is(e):this.onSearchRequest(el,e);break;case ee.is(e):this.onSearchOpenInView(e.params);break;case et.is(e):this.onColumnsChanged(e.params);break;case er.is(e):this.updateGraphConfig(e.params);break;case es.is(e):this.updateExcludedTypes(this._graph?.repoPath,e.params);break;case ea.is(e):this.updateIncludeOnlyRefs(this._graph?.repoPath,e.params);break;case ei.is(e):this.onRefsVisibilityChanged(e.params);break;case eo.is(e):this.onSelectionChanged(e.params)}}updateGraphConfig(e){let t;let i=this.getComponentConfig();for(t in e.changes)if(i[t]!==e.changes[t])switch(t){case"minimap":M.H.updateEffective("graph.minimap.enabled",e.changes[t]);break;case"minimapDataType":M.H.updateEffective("graph.minimap.dataType",e.changes[t]);break;case"minimapMarkerTypes":{let i=[];for(let s of e.changes[t]??[])switch(s){case"localBranches":case"remoteBranches":case"stashes":case"tags":case"pullRequests":i.push(s)}M.H.updateEffective("graph.minimap.additionalTypes",i);break}case"dimMergeCommits":M.H.updateEffective("graph.dimMergeCommits",e.changes[t]);break;case"onlyFollowFirstParent":M.H.updateEffective("graph.onlyFollowFirstParent",e.changes[t])}}_showActiveSelectionDetailsDebounced=void 0;showActiveSelectionDetails(){null==this._showActiveSelectionDetailsDebounced&&(this._showActiveSelectionDetailsDebounced=(0,B.sg)(this.showActiveSelectionDetailsCore.bind(this),250)),this._showActiveSelectionDetailsDebounced()}showActiveSelectionDetailsCore(){let{activeSelection:e}=this;null!=e&&this.host.active&&this.container.events.fire("commit:selected",{commit:e,interaction:"passive",preserveFocus:!0,preserveVisibility:!1===this._showDetailsView},{source:this.host.id})}onConfigurationChanged(e){if(M.H.changed(e,"graph.showDetailsView")&&(this._showDetailsView=M.H.get("graph.showDetailsView")),M.H.changed(e,"graph.commitOrdering")){this.updateState();return}(M.H.changed(e,"defaultDateFormat")||M.H.changed(e,"defaultDateStyle")||M.H.changed(e,"advanced.abbreviatedShaLength")||M.H.changed(e,"graph"))&&(this.notifyDidChangeConfiguration(),(M.H.changed(e,"graph.onlyFollowFirstParent")||(M.H.changed(e,"graph.minimap.enabled")||M.H.changed(e,"graph.minimap.dataType"))&&M.H.get("graph.minimap.enabled")&&"lines"===M.H.get("graph.minimap.dataType")&&!this._graph?.includes?.stats)&&this.updateState())}onRepositoryChanged(e){if(!e.changed(D.Z_.Config,D.Z_.Head,D.Z_.Heads,D.Z_.Remotes,D.Z_.Stash,D.Z_.Status,D.Z_.Tags,D.Z_.Unknown,D.Ti.Any)){this._etagRepository=e.repository.etag;return}e.changed(D.Z_.Head,D.Ti.Any)&&this.setSelectedRows(void 0),this.updateState(!e.changed(D.Z_.Unknown,D.Ti.Exclusive))}onRepositoryFileSystemChanged(e){e.repository?.path===this.repository?.path&&this.notifyDidChangeWorkingTree()}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this.notifyDidChangeSubscription())}onThemeChanged(e){null!=this._theme&&((0,L.g4)(e)&&(0,L.g4)(this._theme)||(0,L.kH)(e)&&(0,L.kH)(this._theme))||(this._theme=e,this.updateState())}onColumnsChanged(e){this.updateColumns(e.config)}onRefsVisibilityChanged(e){this.updateExcludedRefs(this._graph?.repoPath,e.refs,e.visible)}onDoubleClick(e){if("ref"===e.type&&e.ref.context){let t=this.getGraphItemContext(e.ref.context);if(eH(t)){if(null!=e.metadata){if(t=this.getGraphItemContext(e.metadata.data.context),"upstream"===e.metadata.type&&eO(t,"upstreamStatus")){let{ahead:e,behind:i,ref:s}=t.webviewItemValue;if(i>0)return void g.a$(s.repoPath,s);if(e>0)return void g.VC(s.repoPath,!1,s)}else if("pullRequest"===e.metadata.type&&eO(t,"pullrequest"))return void this.openPullRequestOnRemote(t);return}let{ref:i}=t.webviewItemValue;return"head"===e.ref.refType&&e.ref.isCurrentHead?g.S_(i.repoPath):g.S_(i.repoPath,i,!!M.H.isUnset("gitCommands.skipConfirmations")||void 0)}}else if("row"===e.type&&e.row){this._showActiveSelectionDetailsDebounced?.cancel();let t=this.getRevisionReference(this.repository?.path,e.row.id,e.row.type);if(null!=t){this.container.events.fire("commit:selected",{commit:t,interaction:"active",preserveFocus:e.preserveFocus,preserveVisibility:!1},{source:this.host.id});let i=this.host.isHost("editor")?this.container.commitDetailsView:this.container.graphDetailsView;i.ready||i.show({preserveFocus:e.preserveFocus},{commit:t,interaction:"active",preserveVisibility:!1})}}return Promise.resolve()}async onHoverRowRequest(e,t){let i={id:t.params.id,markdown:void 0};if(this.cancelOperation("hover"),null!=this._graph){let e=t.params.id,s=this._hoverCache.get(e);if(null==s){let i;let r=this.createCancellation("hover"),a=!0;switch(t.params.type){case"work-dir-changes":a=!1,i=await this.container.git.getCommit(this._graph.repoPath,b.SU);break;case"stash-node":{let e=await this.container.git.getStash(this._graph.repoPath);i=e?.commits.get(t.params.id);break}default:i=await this.container.git.getCommit(this._graph.repoPath,t.params.id)}if(null!=i&&!r.token.isCancellationRequested){let t=this._graph.rowsStats?.get(i.sha);null!=t&&(i=i.with({stats:{...i.stats,additions:t.additions,deletions:t.deletions,changedFiles:i.stats?.changedFiles?i.stats.changedFiles:t.files}})),s=this.getCommitTooltip(i,r.token).catch(t=>{throw this._hoverCache.delete(e),t}),a&&this._hoverCache.set(e,s)}}if(null!=s)try{i.markdown={status:"fulfilled",value:await s}}catch(e){i.markdown={status:"rejected",reason:e}}}i.markdown??={status:"rejected",reason:new n.AL},this.host.respond(e,t,i)}async getCommitTooltip(e,t){let i,s,r;let[a,o]=await Promise.allSettled([this.container.git.getBestRemotesWithProviders(e.repoPath),e.ensureFullDetails()]);if(t.isCancellationRequested)throw new n.AL;let h=(0,q.Ro)(a,[]),[l]=h;if(l?.hasIntegration()){let[r,a]=await Promise.allSettled([(0,q.zu)(e.getEnrichedAutolinks(l),t),e.getAssociatedPullRequest(l)]);if(t.isCancellationRequested)throw new n.AL;let o=(0,q.Ro)(r);o?.paused||(i=o?.value),s=(0,q.Ro)(a)}return r=(0,y.kk)(e)?M.H.get("views.formats.stashes.tooltip"):M.H.get("views.formats.commits.tooltip"),await v.c.fromTemplateAsync(r,e,{enrichedAutolinks:i,dateFormat:M.H.get("defaultDateFormat"),getBranchAndTagTips:this.getBranchAndTagTips.bind(this),messageAutolinks:!0,messageIndent:4,pullRequest:s,outputFormat:"markdown",remotes:h})}getBranchAndTagTips(e,t){if(null==this._graph)return;let i=this._graph.rows.find(t=>t.sha===e);if(null==i)return;let s=[];return i.heads?.length&&s.push(...i.heads.map(e=>t?.icons?`$(git-branch) ${e.name}`:e.name)),i.remotes?.length&&s.push(...i.remotes.map(e=>{let i=`${e.owner?`${e.owner}/`:""}${e.name}`;return t?.icons?`$(${function(e){switch(e){case"azureDevops":return"gitlens-provider-azdo";case"bitbucket":case"bitbucketServer":return"gitlens-provider-bitbucket";case"github":case"githubEnterprise":return"gitlens-provider-github";case"gitlab":case"gitlabSelfHosted":return"gitlens-provider-gitlab";default:return"cloud"}}(e.hostingServiceType)}) ${i}`:i})),i.tags?.length&&s.push(...i.tags.map(e=>t?.icons?`$(tag) ${e.name}`:e.name)),s.join(", ")||void 0}async onEnsureRowRequest(e,t){let i,s;if(null==this._graph)return;let r=t.params,a=this._graph.remappedIds?.get(r.id)??r.id;this._graph.ids.has(a)?(i=r.id,s=r.id!==a?a:void 0):(await this.updateGraphWithMoreRows(this._graph,a,this._search),this.notifyDidChangeRows(),this._graph.ids.has(a)&&(i=r.id,s=r.id!==a?a:void 0)),this.host.respond(e,t,{id:i,remapped:s})}async onGetMissingAvatars(e){if(null==this._graph)return;let t=this._graph.repoPath;async function i(e,i){let s=await (0,r.m_)(e,{ref:i,repoPath:t});this._graph.avatars.set(e,s.toString(!0))}let s=[];for(let[t,r]of Object.entries(e.emails))this._graph.avatars.has(t)||s.push(i.call(this,t,r));s.length&&(await Promise.allSettled(s),this.updateAvatars())}async onGetMissingRefMetadata(e){if(null==this._graph||null===this._refsMetadata||!O.SD("gitlens:repos:withHostingIntegrationsConnected")?.includes(this._graph.repoPath))return;let t=this._graph.repoPath;async function i(e,i){null==this._refsMetadata&&(this._refsMetadata=new Map);let s=(await this.container.git.getBranches(t,{filter:t=>t.id===e}))?.values?.[0],r={...this._refsMetadata.get(e)};if(null==s){for(let t of i)r[t]=null,this._refsMetadata.set(e,r);return}for(let a of i){if(!z.includes(a)){r[a]=null,this._refsMetadata.set(e,r);continue}if("pullRequest"===a){let i=await s?.getAssociatedPullRequest();if(null==i){(void 0===r.pullRequest||r.pullRequest?.length===0)&&(r.pullRequest=null),this._refsMetadata.set(e,r);continue}let a={hostingServiceType:i.provider.id,id:Number.parseInt(i.id)||0,title:i.title,author:i.author.name,date:(i.mergedDate??i.closedDate??i.updatedDate)?.getTime(),state:i.state,url:i.url,context:(0,x.C9)({webviewItem:`gitlens:pullrequest${i.refs?"+refs":""}`,webviewItemValue:{type:"pullrequest",id:i.id,url:i.url,repoPath:t,refs:i.refs,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain,icon:i.provider.icon}}})};r.pullRequest=[a],this._refsMetadata.set(e,r),s?.upstream?.missing&&this._refsMetadata.set((0,w.Yk)(t,!0,s.upstream.name),r);continue}if("upstream"===a){let t=s?.upstream;if(null==t||void 0==t||t.missing){r.upstream=null,this._refsMetadata.set(e,r);continue}let i={name:(0,w.km)(t.name),owner:(0,w.Zq)(t.name),ahead:s.state.ahead,behind:s.state.behind,context:(0,x.C9)({webviewItem:"gitlens:upstreamStatus",webviewItemValue:{type:"upstreamStatus",ref:(0,P.iw)(s),ahead:s.state.ahead,behind:s.state.behind}})};r.upstream=i,this._refsMetadata.set(e,r)}}}let s=[];for(let t of Object.keys(e.metadata))s.push(i.call(this,t,e.metadata[t]));s.length&&await Promise.allSettled(s),this.updateRefsMetadata()}async onGetMoreRows(e,t=!1){if(this._graph?.paging!=null){if(this._graph?.more==null||this.repository?.etag!==this._etagRepository){this.updateState(!0);return}await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.notifyDidChangeRows(t)}}async onOpenPullRequestDetails(e){let t=this.repository;if(null==t)return;let i=await t.getBranch();if(null==i)return;let s=await i.getAssociatedPullRequest();if(null!=s)return this.container.pullRequestView.showPullRequest(s,i)}async onSearchRequest(e,t){try{let i=await this.getSearchResults(t.params);this.host.respond(e,t,i)}catch(i){this.host.respond(e,t,{results:i instanceof n.AL?void 0:{error:i instanceof f.Do?"Invalid search pattern":"Unexpected error"}})}}async getSearchResults(e){if(null==e.search)return this.resetSearchState(),{results:void 0};let t=this._search;if(e.more&&t?.more!=null&&t.comparisonKey===(0,_.b4)(e.search))return null!=(t=await t.more(e.limit??M.H.get("graph.searchItemLimit")??100))?(this._search=t,await this.ensureSearchStartsInRange(this._graph,t),{results:t.results.size>0?{ids:Object.fromEntries((0,A.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}}:void 0}):{results:void 0};if(null==t||t.comparisonKey!==(0,_.b4)(e.search)){if(null==this.repository)return{results:{error:"No repository"}};this.repository.etag!==this._etagRepository&&this.updateState(!0);let i=this.createCancellation("search");try{t=await this.repository.searchCommits(e.search,{limit:M.H.get("graph.searchItemLimit")??100,ordering:M.H.get("graph.commitOrdering"),cancellation:i.token})}catch(e){throw this._search=void 0,e}if(i.token.isCancellationRequested)throw new n.AL;this._search=t}else t=this._search;let i=await this.ensureSearchStartsInRange(this._graph,t),s=!1;return null!=i&&(s=!0,this.setSelectedRows(i)),{results:0===t.results.size?{count:0}:{ids:Object.fromEntries((0,A.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}},selectedRows:s?this._selectedRows:void 0}}onSearchOpenInView(e){null!=this.repository&&this.container.searchAndCompareView.search(this.repository.path,e.search,{label:{label:`for ${e.search.query}`},reveal:{select:!0,focus:!1,expand:!0}})}async onChooseRepository(){let e=this.container.git.openRepositories.sort((e,t)=>(e===this.repository?1:-1)-(t===this.repository?1:-1)||(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index),t=await (0,G.oe)(`Switch Repository ${o.EO.Dot} ${this.repository?.name}`,"Choose a repository to switch to",e);null!=t&&(this.repository=t)}async onChooseRef(e,t){let i;if(null==this.repository)return this.host.respond(e,t,void 0);if(t.params.alt)i=await (0,I.N)(this.repository.path,`Jump to Reference ${o.EO.Dot} ${this.repository?.name}`,"Choose a reference to jump to",{include:I.m.BranchesAndTags});else{let e=(0,A.I6)(this._graph.branches.values(),e=>e.current);null==e&&(e=await this.repository.getBranch()),null!=e&&(i=e)}return this.host.respond(e,t,i?.sha!=null?{name:i.name,sha:i.sha}:void 0)}_fireSelectionChangedDebounced=void 0;onSelectionChanged(e){this._showActiveSelectionDetailsDebounced?.cancel();let t=e.selection[0];this.setSelectedRows(t?.id),null==this._fireSelectionChangedDebounced&&(this._fireSelectionChangedDebounced=(0,B.sg)(this.fireSelectionChanged.bind(this),50)),this._fireSelectionChangedDebounced(t?.id,t?.type)}fireSelectionChanged(e,t){if(null==this.repository)return;let i=this.getRevisionReference(this.repository.path,e,t),s=null!=i?[i]:void 0;this._selection=s,null!=s&&(!(!this._firstSelection&&this.host.isHost("editor"))||this.host.active)&&(this.container.events.fire("commit:selected",{commit:s[0],interaction:"passive",preserveFocus:!0,preserveVisibility:this._firstSelection?!1===this._showDetailsView:"selection"!==this._showDetailsView},{source:this.host.id}),this._firstSelection=!1)}_notifyDidChangeStateDebounced=void 0;getRevisionReference(e,t,i){if(null!=e&&null!=t)switch(i){case"stash-node":return(0,P.kA)(t,e,{refType:"stash",name:t,number:void 0});case"work-dir-changes":return(0,P.kA)(b.SU,e,{refType:"revision"});default:return(0,P.kA)(t,e,{refType:"revision"})}}updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,B.sg)(this.notifyDidChangeState.bind(this),250)),this._notifyDidChangeStateDebounced()}_notifyDidChangeAvatarsDebounced=void 0;updateAvatars(e=!1){if(e){this.notifyDidChangeAvatars();return}null==this._notifyDidChangeAvatarsDebounced&&(this._notifyDidChangeAvatarsDebounced=(0,B.sg)(this.notifyDidChangeAvatars.bind(this),100)),this._notifyDidChangeAvatarsDebounced()}async notifyDidChangeAvatars(){if(null==this._graph)return;let e=this._graph;return this.host.notify(em,{avatars:Object.fromEntries(e.avatars)})}async notifyDidChangeBranchState(e){return this.host.notify(eu,{branchState:e})}_notifyDidChangeRefsMetadataDebounced=void 0;updateRefsMetadata(e=!1){if(e){this.notifyDidChangeRefsMetadata();return}null==this._notifyDidChangeRefsMetadataDebounced&&(this._notifyDidChangeRefsMetadataDebounced=(0,B.sg)(this.notifyDidChangeRefsMetadata.bind(this),100)),this._notifyDidChangeRefsMetadataDebounced()}async notifyDidChangeRefsMetadata(){return this.host.notify(ef,{metadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata})}async notifyDidChangeColumns(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ev,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(ev,{columns:t,context:this.getColumnHeaderContext(t),settingsContext:this.getGraphSettingsIconContext(t)})}async notifyDidChangeScrollMarkers(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ew,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(ew,{context:this.getGraphSettingsIconContext(t)})}async notifyDidChangeRefsVisibility(e){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ey,this._ipcNotificationMap,this),!1;if(null==e){let t=this.getFiltersByRepo(this._graph?.repoPath);if(e={branchesVisibility:this.getBranchesVisibility(t),excludeRefs:this.getExcludedRefs(t,this._graph)??{},excludeTypes:this.getExcludedTypes(t)??{},includeOnlyRefs:void 0},e?.includeOnlyRefs==null){let i=await this.getIncludedRefs(t,this._graph,{timeout:100});e.includeOnlyRefs=i.refs,i.continuation?.then(t=>{null!=t&&this.notifyDidChangeRefsVisibility({...e,includeOnlyRefs:t})})}}return this.host.notify(ey,e)}async notifyDidChangeConfiguration(){return this.host.ready&&this.host.visible?this.host.notify(eg,{config:this.getComponentConfig()}):(this.host.addPendingIpcNotification(eg,this._ipcNotificationMap,this),!1)}async notifyDidFetch(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eS,this._ipcNotificationMap,this),!1;let e=await this.repository.getLastFetched();return this.host.notify(eS,{lastFetched:new Date(e)})}async notifyDidChangeRows(e=!1,t){if(null==this._graph)return;let i=this._graph;return this.host.notify(eb,{rows:i.rows,avatars:Object.fromEntries(i.avatars),downstreams:Object.fromEntries(i.downstreams),refsMetadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata,rowsStats:i.rowsStats?.size?Object.fromEntries(i.rowsStats):void 0,rowsStatsLoading:i.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),selectedRows:e?this._selectedRows:void 0,paging:{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}},t)}async notifyDidChangeRowsStats(e){if(null!=e.rowsStats)return this.host.notify(eC,{rowsStats:Object.fromEntries(e.rowsStats),rowsStatsLoading:e.rowsStatsDeferred?.isLoaded!=null&&!e.rowsStatsDeferred.isLoaded()})}async notifyDidChangeWorkingTree(){return this.host.ready&&this.host.visible?this.host.notify(eP,{stats:await this.getWorkingTreeStats()??{added:0,deleted:0,modified:0}}):(this.host.addPendingIpcNotification(eP,this._ipcNotificationMap,this),!1)}async notifyDidChangeSelection(){return this.host.ready&&this.host.visible?this.host.notify(eR,{selection:this._selectedRows??{}}):(this.host.addPendingIpcNotification(eR,this._ipcNotificationMap,this),!1)}async notifyDidChangeSubscription(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ec,this._ipcNotificationMap,this),!1;let[e]=await this.getGraphAccess();return this.host.notify(ec,{subscription:e.subscription.current,allowed:!1!==e.allowed})}async notifyDidChangeState(){return this.host.ready&&this.host.visible?(this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(ed,{state:await this.getState()})):(this.host.addPendingIpcNotification(ed,this._ipcNotificationMap,this),!1)}ensureRepositorySubscriptions(e){if(this.ensureLastFetchedSubscription(e),!e&&null!=this._repositoryEventsDisposable)return;null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0);let t=this.repository;null!=t&&(this._repositoryEventsDisposable=s.Disposable.from(t.onDidChange(this.onRepositoryChanged,this),t.watchFileSystem(1e3),t.onDidChangeFileSystem(this.onRepositoryFileSystemChanged,this),(0,O.wt)(e=>{"gitlens:repos:withHostingIntegrationsConnected"===e&&(this.resetRefsMetadata(),this.updateRefsMetadata())})))}onIntegrationConnectionChanged(e){this.notifyDidChangeRepoConnection()}async notifyDidChangeRepoConnection(){this.host.notify(ep,{repositories:await this.getRepositoriesState()})}async getRepositoriesState(){return eT(this.container.git.openRepositories)}async ensureLastFetchedSubscription(e){if(!e&&null!=this._lastFetchedDisposable)return;null!=this._lastFetchedDisposable&&(this._lastFetchedDisposable.dispose(),this._lastFetchedDisposable=void 0);let t=this.repository;if(null==t)return;let i=await t.getLastFetched()??0,s=D.LN.getLastFetchedUpdateInterval(i);0!==i&&s>0&&(this._lastFetchedDisposable=(0,B.gC)(()=>{let e=D.LN.getLastFetchedUpdateInterval(i);s!==D.LN.getLastFetchedUpdateInterval(i)&&(s=e),this.notifyDidFetch()},s))}async ensureSearchStartsInRange(e,t){let i;if(0!==t.results.size){for(let s of t.results.keys()){let t=e.remappedIds?.get(s)??s;if(e.ids.has(t))return t;i=t;break}if(null!=i)return await this.updateGraphWithMoreRows(e,i),this.notifyDidChangeRows(),e.ids.has(i)?i:void 0}}getColumns(){return this.container.storage.getWorkspace("graph:columns")}getExcludedTypes(e){return e?.excludeTypes}getExcludedRefs(e,t){if(null==t)return;let i=e?.excludeRefs;if(null==i||0===Object.keys(i).length)return;let s=e=>this.host.asWebviewUri(e),r=M.H.get("graph.avatars",void 0,!0),a={};for(let e in i){let o={...i[e]};if("remote"===o.type&&o.owner){let e=t.remotes.get(o.owner);null!=e&&(o.avatarUrl=((r?e.provider?.avatarUri:void 0)??W.Wf(this.container,e,s))?.toString(!0))}a[e]=o}return a}async getIncludedRefs(e,t,i){let s,r;if(this.cancelOperation("computeIncludedRefs"),null==t)return{refs:{}};switch(this.getBranchesVisibility(e)){case"smart":{let e;let a=(0,A.I6)(t.branches.values(),e=>e.current);if(null==a)return{refs:{}};let o=this.createCancellation("computeIncludedRefs"),[n,h,l]=await Promise.allSettled([this.container.git.getBaseBranchName(a.repoPath,a.name),(0,w.Z5)(this.container,a.repoPath,a.getRemoteName()),(0,w.b3)(this.container,a,{cancellation:o.token,timeout:i?.timeout})]),p=(0,q.Ro)(n),d=(0,q.Ro)(h),g=(0,q.Ro)(l);g?.paused?r=g.value.then(async e=>{if(!(null==e||o?.token.isCancellationRequested))return Object.fromEntries(await this.getVisibleRefs(t,a,{baseOrTargetBranchName:e,defaultBranchName:d}))}):e=g?.value,s=await this.getVisibleRefs(t,a,{baseOrTargetBranchName:e??p,defaultBranchName:d});break}case"current":{let e=(0,A.I6)(t.branches.values(),e=>e.current);if(null==e)return{refs:{}};s=await this.getVisibleRefs(t,e);break}default:s=new Map}return{refs:Object.fromEntries(s),continuation:r}}getFiltersByRepo(e){if(null==e)return;let t=this.container.storage.getWorkspace("graph:filtersByRepo");return t?.[e]}getColumnSettings(e){let t={...eI};if(null!=e)for(let[i,s]of Object.entries(e))t[i]={...eI[i],...s};return t}getColumnHeaderContext(e){return(0,x.C9)({webviewItem:"gitlens:graph:columns",webviewItemValue:this.getColumnContextItems(e).join(",")})}getGraphSettingsIconContext(e){return(0,x.C9)({webviewItem:"gitlens:graph:settings",webviewItemValue:this.getSettingsIconContextItems(e).join(",")})}getColumnContextItems(e){let t=[],i=["author","changes","datetime","graph","message","ref","sha"],s=0;for(let[r,a]of Object.entries(e))i.includes(r)&&(!a.isHidden&&s++,t.push(`column:${r}:${a.isHidden?"hidden":"visible"}${a.mode?`+${a.mode}`:""}`));return s>1&&t.push("columns:canHide"),t}getSettingsIconContextItems(e){let t=null!=e?this.getColumnContextItems(e):[];if(M.H.get("graph.scrollMarkers.enabled")){let e=M.H.get("graph.scrollMarkers.additionalTypes");for(let i of["localBranches","remoteBranches","stashes","tags","pullRequests"])t.push(`scrollMarker:${i}:${e.includes(i)?"enabled":"disabled"}`)}return t}getBranchesVisibility(e){let t;return this.repository?.virtual?"current":null==e?M.H.get("graph.branchesVisibility"):(null!=e&&null==e.branchesVisibility&&null!=e.includeOnlyRefs&&1===Object.keys(e.includeOnlyRefs).length&&"HEAD"===Object.values(e.includeOnlyRefs)[0].name?(t="current",null!=this.repository&&this.updateFiltersByRepo(this.repository.path,{branchesVisibility:t,includeOnlyRefs:void 0})):t=e?.branchesVisibility??M.H.get("graph.branchesVisibility"),t)}getComponentConfig(){return{avatars:M.H.get("graph.avatars"),dateFormat:M.H.get("graph.dateFormat")??M.H.get("defaultDateFormat")??"short+short",dateStyle:M.H.get("graph.dateStyle")??M.H.get("defaultDateStyle"),enabledRefMetadataTypes:this.getEnabledRefMetadataTypes(),dimMergeCommits:M.H.get("graph.dimMergeCommits"),enableMultiSelection:this.container.prereleaseOrDebugging,highlightRowsOnRefHover:M.H.get("graph.highlightRowsOnRefHover"),idLength:M.H.get("advanced.abbreviatedShaLength"),minimap:M.H.get("graph.minimap.enabled"),minimapDataType:M.H.get("graph.minimap.dataType"),minimapMarkerTypes:this.getMinimapMarkerTypes(),onlyFollowFirstParent:M.H.get("graph.onlyFollowFirstParent"),scrollRowPadding:M.H.get("graph.scrollRowPadding"),scrollMarkerTypes:this.getScrollMarkerTypes(),showGhostRefsOnRowHover:M.H.get("graph.showGhostRefsOnRowHover"),showRemoteNamesOnRefs:M.H.get("graph.showRemoteNames")}}getScrollMarkerTypes(){return M.H.get("graph.scrollMarkers.enabled")?["selection","highlights","head","upstream",...M.H.get("graph.scrollMarkers.additionalTypes")]:[]}getMinimapMarkerTypes(){return M.H.get("graph.minimap.enabled")?["selection","highlights","head","upstream",...M.H.get("graph.minimap.additionalTypes")]:[]}getEnabledRefMetadataTypes(){let e=[];return M.H.get("graph.pullRequests.enabled")&&e.push("pullRequest"),M.H.get("graph.showUpstreamStatus")&&e.push("upstream"),e}async getGraphAccess(){let e=await this.container.git.access(h.k.Graph,this.repository?.path);this._etagSubscription=this.container.subscription.etag,!1===e.allowed&&null==e.subscription.current.previewTrial&&(e=await this.container.git.access(h.k.Graph,this.repository?.path));let t=e?.visibility;return null==t&&null!=this.repository&&(t=await this.container.git.visibility(this.repository?.path)),[e,t]}getGraphItemContext(e){let t="string"==typeof e?JSON.parse(e):e;return null==t||"webview"in t||(t.webview=this.host.id),t}async getWorkingTreeStats(){if(null==this.repository||0===this.container.git.repositoryCount)return;let e=await this.container.git.getStatusForRepo(this.repository.path),t=e?.getDiffStatus();return{added:t?.added??0,deleted:t?.deleted??0,modified:t?.changed??0,context:(0,x.C9)({webviewItem:"gitlens:wip",webviewItemValue:{type:"commit",ref:this.getRevisionReference(this.repository.path,b.SU,"work-dir-changes")}})}}async getState(e){let t,i;if(0===this.container.git.repositoryCount||null==this.repository&&(this.repository=this.container.git.getBestRepositoryOrFirst(),null==this.repository))return{...this.host.baseWebviewState,allowed:!0,repositories:[]};this._etagRepository=this.repository?.etag,this.host.title=`${this.host.originalTitle}: ${this.repository.formattedName}`;let{defaultItemLimit:s}=M.H.get("graph"),r=Math.max(s,this._graph?.ids.size??s),a=this._selectedId,o=null==a||a===b.SU?"HEAD":a,n=this.getColumns(),h=this.getColumnSettings(n),l=this.container.git.getCommitsForGraph(this.repository.uri,e=>this.host.asWebviewUri(e),{include:{stats:M.H.get("graph.minimap.enabled")&&"lines"===M.H.get("graph.minimap.dataType")||!h.changes.isHidden},limit:r,ref:o}),p=Promise.allSettled([this.getGraphAccess(),this.getWorkingTreeStats(),this.repository.getBranch(),this.repository.getLastFetched()]);e?queueMicrotask(async()=>{let e=await l;this.setGraph(e),a!==b.SU&&this.setSelectedRows(e.id),this.notifyDidChangeRefsVisibility(),this.notifyDidChangeRows(!0)}):(t=await l,this.setGraph(t),a!==b.SU&&this.setSelectedRows(t.id));let[d,g,c,m]=await p,[u,f]=(0,q.Ro)(d)??[],v=(0,q.Ro)(c);if(null!=v&&(i={...v.state},null!=v.upstream)){i.upstream=v.upstream.name;let e=this.createCancellation("state"),[t,s]=await Promise.allSettled([v.getRemote(),(0,q.wW)(v.getAssociatedPullRequest(),e.token,100)]),r=(0,q.Ro)(t);r?.provider!=null&&(i.provider={name:r.provider.name,icon:"remote"===r.provider.icon?"cloud":r.provider.icon,url:r.provider.url({type:S.J.Repo})});let a=(0,q.Ro)(s);if(a?.paused){let t={...i};a.value.then(i=>{e?.token.isCancellationRequested||null==i||(t.pr=(0,R.pf)(i),this.notifyDidChangeBranchState(t))})}else{let e=a?.value;null!=e&&(i.pr=(0,R.pf)(e))}}let w=this.getFiltersByRepo(this.repository.path),y={branchesVisibility:this.getBranchesVisibility(w),excludeRefs:this.getExcludedRefs(w,t)??{},excludeTypes:this.getExcludedTypes(w)??{},includeOnlyRefs:void 0};if(null!=t){let e=await this.getIncludedRefs(w,t,{timeout:100});y.includeOnlyRefs=e.refs,e.continuation?.then(e=>{null!=e&&this.notifyDidChangeRefsVisibility({...y,includeOnlyRefs:e})})}return{...this.host.baseWebviewState,windowFocused:this.isWindowFocused,repositories:await eT(this.container.git.openRepositories),selectedRepository:this.repository.path,selectedRepositoryVisibility:f,branchesVisibility:y.branchesVisibility,branchName:v?.name,branchState:i,lastFetched:new Date((0,q.Ro)(m)),selectedRows:this._selectedRows,subscription:u?.subscription.current,allowed:(u?.allowed??!1)!==!1,avatars:null!=t?Object.fromEntries(t.avatars):void 0,refsMetadata:null===this.resetRefsMetadata()?null:{},loading:e,rowsStatsLoading:t?.rowsStatsDeferred?.isLoaded!=null&&!t.rowsStatsDeferred.isLoaded(),rows:t?.rows,downstreams:null!=t?Object.fromEntries(t.downstreams):void 0,paging:null!=t?{startingCursor:t.paging?.startingCursor,hasMore:t.paging?.hasMore??!1}:void 0,columns:h,config:this.getComponentConfig(),context:{header:this.getColumnHeaderContext(h),settings:this.getGraphSettingsIconContext(h)},excludeRefs:y.excludeRefs,excludeTypes:y.excludeTypes,includeOnlyRefs:y.includeOnlyRefs,nonce:this.host.cspNonce,workingTreeStats:(0,q.Ro)(g)??{added:0,deleted:0,modified:0}}}updateColumns(e){let t=this.container.storage.getWorkspace("graph:columns");for(let[i,s]of Object.entries(e))t=(0,F.Y8)(t,i,s);this.container.storage.storeWorkspace("graph:columns",t),this.notifyDidChangeColumns()}updateExcludedRefs(e,t,i){if(null==e||!t?.length)return;let s=this.getFiltersByRepo(e)?.excludeRefs??{};for(let e of t)s=(0,F.Y8)(s,e.id,i?void 0:{id:e.id,type:e.type,name:e.name,owner:e.owner});this.updateFiltersByRepo(e,{excludeRefs:s}),this.notifyDidChangeRefsVisibility()}updateFiltersByRepo(e,t){if(null==e)return;let i=this.container.storage.getWorkspace("graph:filtersByRepo");return this.container.storage.storeWorkspace("graph:filtersByRepo",(0,F.Y8)(i,e,{...i?.[e],...t}))}async getSmartRefs(e,{refs:t,currentBranch:i,defaultBranchName:s,associatedPullRequest:r}){let a=!0;if(r?.refs!=null){let i;let s=(0,A.I6)(e.remotes.values(),e=>e.matches(r.refs.base.url));null!=s&&(i=e.branches.get(`${s.name}/${r.refs.base.branch}`)),null!=i&&(t.push({id:i.id,name:i.name,type:"remote"}),a=!1)}if(a&&null!=s&&s!==i?.name){let i=e.branches.get(s);if(null!=i){if(i.remote){t.push({id:i.id,name:i.name,type:"remote"});let r=await (0,w.kY)(this.repository,s,e.branches);null!=r&&t.push({id:r.id,name:r.name,type:"head"})}else t.push({id:i.id,name:i.name,type:"head"}),null==i.upstream||i.upstream.missing||t.push({id:(0,w.Yk)(e.repoPath,!0,i.upstream.name),name:i.upstream.name,type:"remote"})}}return t}async getVisibleRefs(e,t,i){let s=new Map([t.remote?[t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()}]:[t.id,{id:t.id,type:"head",name:t.name}]]);if(null!=t.upstream&&!t.upstream.missing){let i=(0,w.Yk)(e.repoPath,!0,t.upstream.name);s.has(i)||s.set(i,{id:i,type:"remote",name:(0,w.km)(t.upstream.name),owner:t.getRemoteName()})}let r=!0,a=i?.baseOrTargetBranchName;if(null!=a&&a!==t?.name){let t=e.branches.get(a);if(null!=t){if(r=!1,t.remote)s.has(t.id)||s.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()});else if(null!=t.upstream&&!t.upstream.missing){let i=(0,w.Yk)(e.repoPath,!0,t.upstream.name);s.has(t.id)||s.set(i,{id:i,type:"remote",name:(0,w.km)(t.upstream.name),owner:t.getRemoteName()})}}}let o=i?.associatedPullRequest;if(o?.refs!=null){let t;let i=(0,A.I6)(e.remotes.values(),e=>e.matches(o.refs.base.url));null!=i&&(t=e.branches.get(`${i.name}/${o.refs.base.branch}`)),null==t||(r=!1,s.has(t.id)||s.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()}))}if(r){let r=i?.defaultBranchName;if(null!=r&&r!==t?.name){let t=e.branches.get(r);if(null!=t){if(t.remote){s.has(t.id)||s.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()});let i=await (0,w.kY)(this.repository,r,e.branches);null==i||s.has(i.id)||s.set(i.id,{id:i.id,type:"head",name:i.name})}else if(s.has(t.id)||s.set(t.id,{id:t.id,type:"head",name:t.name}),null!=t.upstream&&!t.upstream.missing){let i=(0,w.Yk)(e.repoPath,!0,t.upstream.name);s.has(t.id)||s.set(i,{id:i,type:"remote",name:(0,w.km)(t.upstream.name),owner:t.getRemoteName()})}}}}return s}updateIncludeOnlyRefs(e,{branchesVisibility:t,refs:i}){let s;if(null!=e){if(i?.length)for(let e of(s={},i))s[e.id]={id:e.id,type:e.type,name:e.name,owner:e.owner};else s=void 0;this.updateFiltersByRepo(e,{branchesVisibility:t,includeOnlyRefs:s}),this.notifyDidChangeRefsVisibility()}}updateExcludedTypes(e,{key:t,value:i}){if(null==e)return;let s=this.getFiltersByRepo(e)?.excludeTypes;(null!=s&&Object.keys(s).length||!1!==i)&&(s=(0,F.Y8)(s,t,i),this.updateFiltersByRepo(e,{excludeTypes:s}),this.notifyDidChangeRefsVisibility())}resetHoverCache(){this._hoverCache.clear(),this.cancelOperation("hover")}resetRefsMetadata(){return this._refsMetadata=(0,O.SD)("gitlens:repos:withHostingIntegrationsConnected")?void 0:null,this._refsMetadata}resetRepositoryState(){this.setGraph(void 0),this.setSelectedRows(void 0)}resetSearchState(){this._search=void 0,this.cancelOperation("search")}setSelectedRows(e){this._selectedId!==e&&(this._selectedId=e,e===b.SU&&(e="work-dir-changes"),this._selectedRows=null!=e?{[e]:!0}:void 0)}setGraph(e){this._graph=e,null==e?(this.resetHoverCache(),this.resetRefsMetadata(),this.resetSearchState(),this.cancelOperation("computeIncludedRefs")):e.rowsStatsDeferred?.promise.then(()=>void this.notifyDidChangeRowsStats(e))}async updateGraphWithMoreRows(e,t,i){let{defaultItemLimit:s,pageItemLimit:r}=M.H.get("graph"),a=await e.more?.(r??s,t);if(null!=a){if(this.setGraph(a),!i?.paging?.hasMore)return;let e=A.HV(i.results)?.[0];if(null==e)return;let t=a.remappedIds?.get(e)??e;a.ids.has(t)&&queueMicrotask(async()=>{try{let e=await this.getSearchResults({search:i.query,more:!0});this.host.notify(eW,e)}catch(e){if(e instanceof n.AL)return;this.host.notify(eW,{results:{error:e instanceof f.Do?"Invalid search pattern":"Unexpected error"}})}})}}fetch(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;g.hd(this.repository,t)}pull(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;g.a$(this.repository,t)}push(e){let t=null!=e?this.getGraphItemRef(e):void 0;g.VC(this.repository,void 0,t)}createBranch(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():l.vt(t.repoPath,t)}deleteBranch(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue;return l.TF(t.repoPath,t)}return Promise.resolve()}mergeBranchInto(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue;return g.h1(t.repoPath,t)}return Promise.resolve()}openBranchOnRemote(e,t){if(eH(e,"branch")){let i;let{ref:s}=e.webviewItemValue;return s.remote?i=(0,w.Zq)(s.name):null!=s.upstream&&(i=(0,w.Zq)(s.upstream.name)),(0,T.RS)(o.Ts.OpenOnRemote,{repoPath:s.repoPath,resource:{type:S.J.Branch,branch:s.name},remote:i,clipboard:t})}return Promise.resolve()}publishBranch(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue;return g.VC(t.repoPath,void 0,t)}return Promise.resolve()}rebase(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():g.RU(t.repoPath,t)}rebaseToRemote(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return g.RU(t.repoPath,(0,P.kA)(t.upstream.name,t.repoPath,{refType:"branch",name:t.upstream.name,remote:!0}))}return Promise.resolve()}renameBranch(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue;return l.$w(t.repoPath,t)}return Promise.resolve()}cherryPick(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():g.$T(t.repoPath,t)}async copy(e){let t;let{selection:i}=this.getGraphItemRefs(e);if(i.length)t=i.map(e=>"revision"===e.refType&&e.message?`${e.name}: ${e.message.trim()}`:e.name).join("\n");else if(eO(e,"contributor")){let{name:i,email:s}=e.webviewItemValue;t=`${i}${s?` <${s}>`:""}`}else if(eO(e,"pullrequest")){let{url:i}=e.webviewItemValue;t=i}null!=t&&await s.env.clipboard.writeText(t)}copyMessage(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,T.RS)(o.Ts.CopyMessageToClipboard,{repoPath:t.repoPath,sha:t.ref,message:"message"in t?t.message:void 0})}async copySha(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=t.ref;return(0,P.HH)(i)||(i=await this.container.git.resolveReference(t.repoPath,i,void 0,{force:!0})),(0,T.RS)(o.Ts.CopyShaToClipboard,{sha:i})}openInDetailsView(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():this.host.isHost("view")?void(0,p.tl)(t,{preserveFocus:!0,preserveVisibility:!1}):(0,T.RS)(o.Ts.ShowInDetailsView,{ref:t})}openSCM(e){return null==this.getGraphItemRef(e,"revision")?Promise.resolve():(0,T.S4)("workbench.view.scm")}openCommitOnRemote(e,t){let{selection:i}=this.getGraphItemRefs(e,"revision");return null==i?Promise.resolve():(0,T.RS)(o.Ts.OpenOnRemote,{repoPath:i[0].repoPath,resource:i.map(e=>({type:S.J.Commit,sha:e.ref})),clipboard:t})}copyDeepLinkToBranch(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue;return(0,T.RS)(o.Ts.CopyDeepLinkToBranch,{refOrRepoPath:t})}return Promise.resolve()}copyDeepLinkToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,T.RS)(o.Ts.CopyDeepLinkToCommit,{refOrRepoPath:t})}copyDeepLinkToRepo(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue;return t.remote?(0,T.RS)(o.Ts.CopyDeepLinkToRepo,{refOrRepoPath:t.repoPath,remote:(0,w.Zq)(t.name)}):Promise.resolve()}return Promise.resolve()}copyDeepLinkToTag(e){if(eH(e,"tag")){let{ref:t}=e.webviewItemValue;return(0,T.RS)(o.Ts.CopyDeepLinkToTag,{refOrRepoPath:t})}return Promise.resolve()}async shareAsCloudPatch(e){let t=this.getGraphItemRef(e,"revision")??this.getGraphItemRef(e,"stash");if(null==t)return Promise.resolve();let{title:i,description:s}=(0,k.r)(t.message);return(0,T.RS)(o.Ts.CreateCloudPatch,{to:t.ref,repoPath:t.repoPath,title:i,description:s})}resetCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():g.cL(t.repoPath,(0,P.kA)(`${t.ref}^`,t.repoPath,{refType:"revision",name:`${t.name}^`,message:t.message}))}resetToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():g.cL(t.repoPath,t)}resetToTip(e){let t=this.getGraphItemRef(e,"branch");return null==t?Promise.resolve():g.cL(t.repoPath,(0,P.kA)(t.ref,t.repoPath,{refType:"revision",name:t.name}))}revertCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():g.ru(t.repoPath,t)}switchTo(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():g.S_(t.repoPath,t)}hideRef(e,t){var i;let s;if(t?.group&&null!=(i=e)&&null!=i&&(0,x.PH)(i)&&("gitlens.graph"===i.webview||"gitlens.views.graph"===i.webview)&&"object"==typeof i.webviewItemGroupValue&&"refGroup"===i.webviewItemGroupValue.type)({refs:s}=e.webviewItemGroupValue);else if(!t?.group&&eH(e)){let{ref:t}=e.webviewItemValue;null!=t.id&&(s=[t])}return null!=s&&this.updateExcludedRefs(this._graph?.repoPath,s.map(e=>{let i="branch"===e.refType&&e.remote;return{id:e.id,name:i?t?.remote?"*":(0,w.km)(e.name):e.name,owner:i?(0,w.Zq)(e.name):void 0,type:"branch"===e.refType?e.remote?"remote":"head":"tag"}}),!1),Promise.resolve()}switchToAnother(e){let t=this.getGraphItemRef(e);return null==t?g.S_(this.repository?.path):g.S_(t.repoPath)}async undoCommit(e){let t=this.getGraphItemRef(e,"revision");if(null==t)return Promise.resolve();await (0,p.MQ)(this.container,t)}saveStash(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():c.VC(t.repoPath)}applyStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():c.Bb(t.repoPath,t)}deleteStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():c.gv(t.repoPath,[t])}renameStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():c.$w(t.repoPath,t)}async createTag(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.vt(t.repoPath,t)}deleteTag(e){if(eH(e,"tag")){let{ref:t}=e.webviewItemValue;return m.TF(t.repoPath,t)}return Promise.resolve()}async createWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():u.vt(t.repoPath,void 0,t)}async createPullRequest(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),s=await i?.getBranch(t.name),r=await s?.getRemote();return(0,T.ph)("createPullRequest",{repoPath:t.repoPath,remote:null!=r?{name:r.name,provider:null!=r.provider?{id:r.provider.id,name:r.provider.name,domain:r.provider.domain}:void 0,url:r.url}:void 0,branch:{name:t.name,upstream:t.upstream?.name,isRemote:t.remote}})}return Promise.resolve()}openPullRequest(e){if(eO(e,"pullrequest")){let t=e.webviewItemValue;return(0,T.ph)("openPullRequest",{repoPath:t.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})}return Promise.resolve()}openPullRequestChanges(e){if(eO(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=(0,R.tI)(t.repoPath,t.refs);return(0,p.$5)(this.container,{repoPath:e.repoPath,lhs:e.base.ref,rhs:e.head.ref},{title:`Changes in Pull Request #${t.id}`})}}return Promise.resolve()}openPullRequestComparison(e){if(eO(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=(0,R.tI)(t.repoPath,t.refs);return this.container.searchAndCompareView.compare(e.repoPath,e.head,e.base)}}return Promise.resolve()}openPullRequestOnRemote(e,t){if(eO(e,"pullrequest")){let{url:i}=e.webviewItemValue;return(0,T.RS)(o.Ts.OpenPullRequestOnRemote,{pr:{url:i},clipboard:t})}return Promise.resolve()}async compareAncestryWithWorking(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=s)return this.container.searchAndCompareView.compare(t.repoPath,"",{ref:s,label:`${i.ref} (${(0,P.pV)(s)})`})}async compareHeadWith(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let[i,s]=await (0,p.Di)(this.container,t.repoPath,"HEAD",t.ref);return this.container.searchAndCompareView.compare(t.repoPath,i,s)}compareBranchWithHead(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,t.ref,"HEAD")}async compareWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=s)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,{ref:s,label:`${i.ref} (${(0,P.pV)(s)})`})}async openChangedFileDiffsWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=s)return(0,p.$5)(this.container,{repoPath:t.repoPath,lhs:s,rhs:t.ref},{title:`Changes between ${i.ref} (${(0,P.pV)(s)}) ${o.EO.ArrowLeftRightLong} ${(0,P.pV)(t.ref,{strings:{working:"Working Tree"}})}`})}compareWithUpstream(e){if(eH(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,t.upstream.name)}return Promise.resolve()}compareWorkingWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"",t.ref)}copyWorkingChangesToWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():u.PB("working-tree",t.repoPath)}async openFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.Km)(t)}async openAllChanges(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,p.LH)(i):(0,p.po)(i)}async openAllChangesWithWorking(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,p.Ce)(i):(0,p.Gu)(i)}async openRevisions(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.m)(t)}async openOnlyChangedFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.E9)(t)}addAuthor(e){if(eO(e,"contributor")){let{repoPath:t,name:i,email:s,current:r}=e.webviewItemValue;return d.s(t,new C.sL(t,i,s,0,void 0,r))}return Promise.resolve()}async toggleColumn(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.isHidden=!t:s={isHidden:!t},i=(0,F.Y8)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns(),"changes"!==e||s.isHidden||this._graph?.includes?.stats||this.updateState()}async toggleScrollMarker(e,t){let i=M.H.get("graph.scrollMarkers.additionalTypes"),s=!1;t&&!i.includes(e)?(i=i.concat(e),s=!0):!t&&i.includes(e)&&(i=i.filter(t=>t!==e),s=!0),s&&(await M.H.updateEffective("graph.scrollMarkers.additionalTypes",i),this.notifyDidChangeScrollMarkers())}async setColumnMode(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.mode=t:s={mode:t},i=(0,F.Y8)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns()}getCommitFromGraphItemRef(e){let t=this.getGraphItemRef(e,"revision");return null!=t||null!=(t=this.getGraphItemRef(e,"stash"))?this.container.git.getCommit(t.repoPath,t.ref):Promise.resolve(void 0)}getGraphItemRef(e,t){if(null==e){let e=this.activeSelection;return null!=e&&(null==t||t===e.refType)?e:void 0}switch(t){case"branch":return eH(e,"branch")||eO(e,"upstreamStatus")?e.webviewItemValue.ref:void 0;case"revision":return eH(e,"revision")?e.webviewItemValue.ref:void 0;case"stash":return eH(e,"stash")?e.webviewItemValue.ref:void 0;case"tag":return eH(e,"tag")?e.webviewItemValue.ref:void 0;default:return eH(e)?e.webviewItemValue.ref:void 0}}getGraphItemRefs(e,t){if(null==e)return{active:void 0,selection:[]};switch(t){case"branch":if(!eH(e,"branch")&&!eO(e,"upstreamStatus"))return{active:void 0,selection:[]};break;case"revision":if(!eH(e,"revision"))return{active:void 0,selection:[]};break;case"stash":if(!eH(e,"stash"))return{active:void 0,selection:[]};break;case"tag":if(!eH(e,"tag"))return{active:void 0,selection:[]};break;default:if(!eH(e))return{active:void 0,selection:[]}}let i=e.webviewItemsValues?.map(e=>e.webviewItemValue.ref)??[];return i.length||i.push(e.webviewItemValue.ref),{active:e.webviewItemValue.ref,selection:i}}createCancellation(e){this.cancelOperation(e);let t=new s.CancellationTokenSource;return this._cancellations.set(e,t),t}cancelOperation(e){this._cancellations.get(e)?.cancel(),this._cancellations.delete(e)}};async function eT(e){return 0===e.length?Promise.resolve([]):Promise.all(e.map(async e=>{let t=await e.getBestRemoteWithIntegration(),i=!1;return t?.maybeIntegrationConnected&&(i=!0),{formattedName:e.formattedName,id:e.id,name:e.name,path:e.path,isVirtual:e.provider.virtual,isConnected:i}}))}function eM(e){return null!=e&&(0,x.sc)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview)}function eO(e,t){return null!=e&&eM(e)&&"object"==typeof e.webviewItemValue&&e.webviewItemValue.type===t}function eH(e,t){return null!=e&&eM(e)&&"object"==typeof e.webviewItemValue&&"ref"in e.webviewItemValue&&(null==t||e.webviewItemValue.ref.refType===t)}function eV(e){return null!=e&&"object"==typeof e&&"ref"in e&&(0,P.cf)(e.ref)}ek([(0,V.Yz)({args:{0:e=>e.toString()}})],GraphWebviewProvider.prototype,"onRepositoryChanged",1),ek([(0,V.Yz)({args:!1})],GraphWebviewProvider.prototype,"onRepositoryFileSystemChanged",1),ek([(0,V.Yz)({args:!1})],GraphWebviewProvider.prototype,"onSubscriptionChanged",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"onEnsureRowRequest",1),ek([(0,H.G)(),(0,V.Yz)()],GraphWebviewProvider.prototype,"onGetMoreRows",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"onOpenPullRequestDetails",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"onSearchRequest",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"updateState",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"updateAvatars",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeAvatars",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeBranchState",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"updateRefsMetadata",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsMetadata",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeColumns",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeScrollMarkers",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsVisibility",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeConfiguration",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidFetch",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRows",1),ek([(0,V.Yz)({args:!1})],GraphWebviewProvider.prototype,"notifyDidChangeRowsStats",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeWorkingTree",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSelection",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSubscription",1),ek([(0,V.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeState",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"fetch",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"pull",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"push",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"createBranch",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"deleteBranch",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"mergeBranchInto",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openBranchOnRemote",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"publishBranch",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"rebase",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"rebaseToRemote",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"renameBranch",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"cherryPick",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"copy",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"copyMessage",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"copySha",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openInDetailsView",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openSCM",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openCommitOnRemote",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToBranch",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToCommit",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToRepo",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToTag",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"shareAsCloudPatch",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"resetCommit",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"resetToCommit",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"resetToTip",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"revertCommit",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"switchTo",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"hideRef",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"switchToAnother",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"undoCommit",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"saveStash",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"applyStash",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"deleteStash",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"renameStash",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"createTag",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"deleteTag",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"createWorktree",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"createPullRequest",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openPullRequest",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openPullRequestChanges",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openPullRequestComparison",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openPullRequestOnRemote",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"compareAncestryWithWorking",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"compareHeadWith",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"compareBranchWithHead",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"compareWithMergeBase",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openChangedFileDiffsWithMergeBase",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"compareWithUpstream",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"compareWorkingWith",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openFiles",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openAllChanges",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openAllChangesWithWorking",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openRevisions",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"openOnlyChangedFiles",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"addAuthor",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"toggleColumn",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"toggleScrollMarker",1),ek([(0,V.Rm)()],GraphWebviewProvider.prototype,"setColumnMode",1)}};